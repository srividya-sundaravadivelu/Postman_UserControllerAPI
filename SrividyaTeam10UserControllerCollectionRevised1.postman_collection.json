{
	"info": {
		"_postman_id": "886c3159-a015-4fb7-8a7b-0f10bb6ea62b",
		"name": "SrividyaTeam10UserControllerCollectionRevised1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20373048"
	},
	"item": [
		{
			"name": "CreateNewUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get contact number from Excel\r",
							"let phoneNumber = pm.iterationData.get(\"user_contact_number\");\r",
							"console.log(phoneNumber);\r",
							"// Check if phoneNumber is \"GENERATE_IN_CODE\"\r",
							"if (phoneNumber === \"GENERATE_IN_CODE\") {\r",
							"    console.log(\"inside GENERATE_IN_CODE\");\r",
							"    phoneNumber = Math.floor(1000000000 + Math.random() * 9000000000);  // Generate random 10-digit number\r",
							"}\r",
							"// Set final value in variable\r",
							"pm.variables.set(\"user_contact_number\", phoneNumber);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {\r",
							"    // Get expected status code from CSV\r",
							"    let expectedStatusCode = parseInt(pm.iterationData.get('expected_status_code')); \r",
							"\r",
							"     console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    // Get expected status line from CSV\r",
							"    let expectedStatusLine = pm.iterationData.get('expected_status_line'); \r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"if (pm.response.code === 201) {\r",
							"\r",
							"    // Save the newly created user id in collection variable\r",
							"    pm.collectionVariables.set(\"new_user_Id\",pm.response.json().user_id);\r",
							"    pm.collectionVariables.set(\"new_user_first_name\",pm.response.json().user_first_name);\r",
							"\r",
							"    console.log(pm.collectionVariables.get(\"new_user_Id\"));\r",
							"    console.log(pm.collectionVariables.get(\"new_user_first_name\"));\r",
							"\r",
							"    // Schema Validation\r",
							"    pm.test(\"Response schema is valid\", function () {\r",
							"        const userSchema = { \r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"userAddress\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"addressId\": { \"type\": \"integer\" },\r",
							"                        \"plotNumber\": { \"type\": [\"string\", \"null\"] },\r",
							"                        \"street\": { \"type\": \"string\" },\r",
							"                        \"state\": { \"type\": \"string\" },\r",
							"                        \"country\": { \"type\": \"string\" },\r",
							"                        \"zipCode\": { \"type\": \"integer\" }\r",
							"                    },\r",
							"                    \"required\": [\"addressId\", \"plotNumber\", \"street\", \"state\", \"country\", \"zipCode\"]\r",
							"                },\r",
							"                \"user_id\": { \"type\": \"integer\" },\r",
							"                \"user_first_name\": { \"type\": \"string\" },\r",
							"                \"user_last_name\": { \"type\": \"string\" },\r",
							"                \"user_contact_number\": { \"type\": \"integer\" },\r",
							"                \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"                \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"                \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"userAddress\",\r",
							"                \"user_id\",\r",
							"                \"user_first_name\",\r",
							"                \"user_last_name\",\r",
							"                \"user_contact_number\",\r",
							"                \"user_email_id\",\r",
							"                \"creation_time\",\r",
							"                \"last_mod_time\"\r",
							"            ]\r",
							"        };\r",
							"    });\r",
							"\r",
							"    // Data Validation\r",
							"    pm.test(\"Validate user details\", function () {\r",
							"        let responseJson = pm.response.json();\r",
							"        \r",
							"        // Validate that the values match the expected ones from the iteration data\r",
							"        pm.expect(responseJson.user_first_name).to.eql(pm.iterationData.get('user_first_name'));\r",
							"        pm.expect(responseJson.user_last_name).to.eql(pm.iterationData.get('user_last_name'));\r",
							"        pm.expect(responseJson.user_contact_number).to.eql(pm.variables.get('user_contact_number'));\r",
							"        pm.expect(responseJson.userAddress.street).to.eql(pm.iterationData.get('street'));\r",
							"        pm.expect(responseJson.userAddress.plotNumber).to.eql(pm.iterationData.get('plotNumber'));\r",
							"        pm.expect(responseJson.userAddress.state).to.eql(pm.iterationData.get('state'));\r",
							"        pm.expect(responseJson.userAddress.country).to.eql(pm.iterationData.get('country'));\r",
							"        pm.expect(responseJson.userAddress.zipCode).to.eql(pm.iterationData.get('zipCode'));       \r",
							"\r",
							"    });\r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"userAddress\":{\"plotNumber\":\"{{plotNumber}}\",\"street\":\"{{street}}\",\"state\":\"{{state}}\",\"country\":\"{{country}}\",\"zipCode\":{{zipCode}}},\"user_first_name\":\"{{user_first_name}}\",\"user_last_name\":\"{{user_last_name}}\",\"user_contact_number\":\"{{user_contact_number}}\",\"user_email_id\":\"{{user_email_id}}\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUsers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {\r",
							"    // Get expected status code from CSV\r",
							"    let expectedStatusCode = parseInt(pm.iterationData.get('expected_status_code')); \r",
							"\r",
							"     console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    // Get expected status line from CSV\r",
							"    let expectedStatusLine = pm.iterationData.get('expected_status_line'); \r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    // Schema validation\r",
							"    pm.test(\"Response schema is valid\", function () {\r",
							"        var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"        \"userAddress\": {\r",
							"            \"oneOf\": [\r",
							"            { \"type\": \"null\" },\r",
							"            {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                \"addressId\": { \"type\": \"integer\" },\r",
							"                \"plotNumber\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"street\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"state\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"country\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"zipCode\": { \"oneOf\": [{ \"type\": \"integer\" }, { \"type\": \"null\" }] }\r",
							"                }\r",
							"            }\r",
							"            ]\r",
							"        },\r",
							"        \"user_id\": { \"type\": \"integer\" },\r",
							"        \"user_first_name\": { \"type\": \"string\" },\r",
							"        \"user_last_name\": { \"type\": \"string\" },\r",
							"        \"user_contact_number\": { \"type\": \"integer\" },\r",
							"        \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"        \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
							"        },\r",
							"        \"required\": [\r",
							"        \"user_id\",\r",
							"        \"user_first_name\",\r",
							"        \"user_last_name\",\r",
							"        \"user_contact_number\",\r",
							"        \"user_email_id\",\r",
							"        \"creation_time\",\r",
							"        \"last_mod_time\"\r",
							"        ]\r",
							"    }\r",
							"    };\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {\r",
							"    // Get expected status code from CSV\r",
							"    let expectedStatusCode = parseInt(pm.iterationData.get('expected_status_code')); \r",
							"\r",
							"     console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    // Get expected status line from CSV\r",
							"    let expectedStatusLine = pm.iterationData.get('expected_status_line'); \r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    // Schema validation\r",
							"    pm.test(\"Response schema is valid\", function () {\r",
							"        var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"userAddress\": {\r",
							"        \"type\": [\"object\", \"null\"],\r",
							"        \"properties\": {\r",
							"            \"addressId\": { \"type\": \"integer\" },\r",
							"            \"plotNumber\": { \"type\": [\"string\", \"null\"] },\r",
							"            \"street\": { \"type\": [\"string\", \"null\"] },\r",
							"            \"state\": { \"type\": [\"string\", \"null\"] },\r",
							"            \"country\": { \"type\": [\"string\", \"null\"] },\r",
							"            \"zipCode\": { \"type\": [\"integer\", \"null\"] }\r",
							"        },\r",
							"        \"required\": [\"addressId\"]\r",
							"        },\r",
							"        \"user_id\": { \"type\": \"integer\" },\r",
							"        \"user_first_name\": { \"type\": \"string\" },\r",
							"        \"user_last_name\": { \"type\": \"string\" },\r",
							"        \"user_contact_number\": { \"type\": \"integer\" },\r",
							"        \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"        \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"user_id\",\r",
							"        \"user_first_name\",\r",
							"        \"user_last_name\",\r",
							"        \"user_contact_number\",\r",
							"        \"user_email_id\",\r",
							"        \"creation_time\",\r",
							"        \"last_mod_time\"\r",
							"    ]\r",
							"    };\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"\r",
							"    // Data Validation - Check if the user is retrieved correctly for the userId passed\r",
							"    let expectedUserId = pm.collectionVariables.get(\"new_user_Id\"); \r",
							"    let actualUserId = pm.response.json().user_id; // Get the user ID from response\r",
							"\r",
							"    pm.test(\"User ID in response matches the requested user ID\", function () {\r",
							"        pm.expect(actualUserId).to.eql(parseInt(expectedUserId));\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}/{{new_user_Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}",
						"{{new_user_Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserByInvalidID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {\r",
							"    // Get expected status code from CSV\r",
							"    let expectedStatusCode = parseInt(pm.iterationData.get('expected_status_code')); \r",
							"\r",
							"     console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    // Get expected status line from CSV\r",
							"    let expectedStatusLine = pm.iterationData.get('expected_status_line'); \r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    // Schema validation\r",
							"    pm.test(\"Response schema is valid\", function () {\r",
							"        var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"userAddress\": {\r",
							"        \"type\": [\"object\", \"null\"],\r",
							"        \"properties\": {\r",
							"            \"addressId\": { \"type\": \"integer\" },\r",
							"            \"plotNumber\": { \"type\": [\"string\", \"null\"] },\r",
							"            \"street\": { \"type\": [\"string\", \"null\"] },\r",
							"            \"state\": { \"type\": [\"string\", \"null\"] },\r",
							"            \"country\": { \"type\": [\"string\", \"null\"] },\r",
							"            \"zipCode\": { \"type\": [\"integer\", \"null\"] }\r",
							"        },\r",
							"        \"required\": [\"addressId\"]\r",
							"        },\r",
							"        \"user_id\": { \"type\": \"integer\" },\r",
							"        \"user_first_name\": { \"type\": \"string\" },\r",
							"        \"user_last_name\": { \"type\": \"string\" },\r",
							"        \"user_contact_number\": { \"type\": \"integer\" },\r",
							"        \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"        \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"user_id\",\r",
							"        \"user_first_name\",\r",
							"        \"user_last_name\",\r",
							"        \"user_contact_number\",\r",
							"        \"user_email_id\",\r",
							"        \"creation_time\",\r",
							"        \"last_mod_time\"\r",
							"    ]\r",
							"    };\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"\r",
							"    // Data Validation - Check if the user is retrieved correctly for the userId passed\r",
							"    let expectedUserId = pm.collectionVariables.get(\"new_user_Id\"); \r",
							"    let actualUserId = pm.response.json().user_id; // Get the user ID from response\r",
							"\r",
							"    pm.test(\"User ID in response matches the requested user ID\", function () {\r",
							"        pm.expect(actualUserId).to.eql(parseInt(expectedUserId));\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserByFirstName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {\r",
							"    // Get expected status code from CSV\r",
							"    let expectedStatusCode = parseInt(pm.iterationData.get('expected_status_code')); \r",
							"\r",
							"     console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    // Get expected status line from CSV\r",
							"    let expectedStatusLine = pm.iterationData.get('expected_status_line'); \r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"console.log(pm.response.code);\r",
							"if (pm.response.code === 200) {\r",
							"    // Schema validation\r",
							"    pm.test(\"Response schema is valid\", function () {\r",
							"        var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"        \"userAddress\": {\r",
							"            \"oneOf\": [\r",
							"            { \"type\": \"null\" },\r",
							"            {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                \"addressId\": { \"type\": \"integer\" },\r",
							"                \"plotNumber\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"street\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"state\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"country\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"zipCode\": { \"oneOf\": [{ \"type\": \"integer\" }, { \"type\": \"null\" }] }\r",
							"                }\r",
							"            }\r",
							"            ]\r",
							"        },\r",
							"        \"user_id\": { \"type\": \"integer\" },\r",
							"        \"user_first_name\": { \"type\": \"string\" },\r",
							"        \"user_last_name\": { \"type\": \"string\" },\r",
							"        \"user_contact_number\": { \"type\": \"integer\" },\r",
							"        \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"        \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
							"        },\r",
							"        \"required\": [\r",
							"        \"user_id\",\r",
							"        \"user_first_name\",\r",
							"        \"user_last_name\",\r",
							"        \"user_contact_number\",\r",
							"        \"user_email_id\",\r",
							"        \"creation_time\",\r",
							"        \"last_mod_time\"\r",
							"        ]\r",
							"    }\r",
							"    };\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"\r",
							"    // Data Validation - Check if the user is retrieved correctly for the user first name passed\r",
							"    let expectedUserFName =  pm.collectionVariables.get(\"new_user_first_name\");\r",
							"    console.log(expectedUserFName);\r",
							"\r",
							"    pm.test(\"User FName in response matches the requested user FName\", function () {\r",
							"        let actualUserFName= pm.response.json()[0].user_first_name; // Get the user first name from response\r",
							"        console.log(actualUserFName);\r",
							"        console.log(pm.response.json()[0]);\r",
							"        pm.expect(actualUserFName).to.eql(expectedUserFName);\r",
							"    });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}/{{new_user_first_name}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}",
						"{{new_user_first_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserByInvalidFirstName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {\r",
							"    // Get expected status code from CSV\r",
							"    let expectedStatusCode = parseInt(pm.iterationData.get('expected_status_code')); \r",
							"\r",
							"     console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    // Get expected status line from CSV\r",
							"    let expectedStatusLine = pm.iterationData.get('expected_status_line'); \r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    // Schema validation\r",
							"    pm.test(\"Response schema is valid\", function () {\r",
							"        var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"        \"userAddress\": {\r",
							"            \"oneOf\": [\r",
							"            { \"type\": \"null\" },\r",
							"            {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                \"addressId\": { \"type\": \"integer\" },\r",
							"                \"plotNumber\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"street\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"state\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"country\": { \"oneOf\": [{ \"type\": \"string\" }, { \"type\": \"null\" }] },\r",
							"                \"zipCode\": { \"oneOf\": [{ \"type\": \"integer\" }, { \"type\": \"null\" }] }\r",
							"                }\r",
							"            }\r",
							"            ]\r",
							"        },\r",
							"        \"user_id\": { \"type\": \"integer\" },\r",
							"        \"user_first_name\": { \"type\": \"string\" },\r",
							"        \"user_last_name\": { \"type\": \"string\" },\r",
							"        \"user_contact_number\": { \"type\": \"integer\" },\r",
							"        \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"        \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
							"        },\r",
							"        \"required\": [\r",
							"        \"user_id\",\r",
							"        \"user_first_name\",\r",
							"        \"user_last_name\",\r",
							"        \"user_contact_number\",\r",
							"        \"user_email_id\",\r",
							"        \"creation_time\",\r",
							"        \"last_mod_time\"\r",
							"        ]\r",
							"    }\r",
							"    };\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    });\r",
							"\r",
							"    // Data Validation - Check if the user is retrieved correctly for the user first name passed\r",
							"    let expectedUserFName = pm.iterationData.get('user_first_name');  \r",
							"\r",
							"    pm.test(\"User FName in response matches the requested user FName\", function () {\r",
							"        let actualUserFName= pm.response.json().user_first_name; // Get the user first name from response\r",
							"\r",
							"        pm.expect(actualUserFName).to.eql(expectedUserFName);\r",
							"    });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}/{{user_first_name}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}",
						"{{user_first_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Send GET request to fetch the user data\r",
							"let username = pm.environment.get(\"username\");\r",
							"let password = pm.environment.get(\"password\"); \r",
							"\r",
							"let uid = pm.collectionVariables.get(\"new_user_Id\");\r",
							"let bUrl = pm.environment.get('baseUrl'); \r",
							"\r",
							"// Encode the username and password in base64\r",
							"let basicAuth = 'Basic ' + btoa(username + ':' + password);\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${bUrl}/uap/user/${uid}`,  \r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Authorization': basicAuth,  // Basic Authentication header\r",
							"        'Content-Type': 'application/json'\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    // Handle the response here\r",
							"    if (err) {\r",
							"        console.log('Error:', err);\r",
							"    } \r",
							"\r",
							"    // Parse the response JSON\r",
							"    let responseData = res.json();\r",
							"\r",
							"    // Store the fetched user data in variables\r",
							"    let updatedData = responseData;\r",
							"\r",
							"    // Update only fields that are passed in from Excel\r",
							"    let userFirstName = pm.iterationData.get(\"user_first_name\");\r",
							"    if (userFirstName) {\r",
							"        updatedData.user_first_name = userFirstName;\r",
							"    }\r",
							"\r",
							"    let userLastName = pm.iterationData.get(\"user_last_name\");\r",
							"    if (userLastName) {\r",
							"        updatedData.user_last_name = userLastName;\r",
							"    } \r",
							"\r",
							"    let userEmail = pm.iterationData.get(\"user_email_id\");\r",
							"    if (userEmail) {\r",
							"        updatedData.user_email_id = userEmail;\r",
							"    }\r",
							"\r",
							"    // Get contact number from Excel\r",
							"    let phoneNumber = pm.iterationData.get(\"user_contact_number\");    \r",
							"    if (phoneNumber) {\r",
							"        \r",
							"        // Check if phoneNumber is \"GENERATE_IN_CODE\"\r",
							"        if (phoneNumber === \"GENERATE_IN_CODE\") {\r",
							"            console.log(\"inside GENERATE_IN_CODE\");\r",
							"            phoneNumber = Math.floor(1000000000 + Math.random() * 9000000000);  // Generate random 10-digit number\r",
							"        }\r",
							"\r",
							"        // Set final value in environment variable    \r",
							"        updatedData.user_contact_number = phoneNumber;\r",
							"    }  \r",
							"\r",
							"    // street\r",
							"    let street = pm.iterationData.get(\"street\");\r",
							"    if (street) {\r",
							"        updatedData.userAddress.street = street;\r",
							"    }\r",
							"\r",
							"    // plotNumber\r",
							"    let plotNumber = pm.iterationData.get(\"plotNumber\");\r",
							"    if (plotNumber) {\r",
							"        updatedData.userAddress.plotNumber = plotNumber;\r",
							"    }\r",
							"\r",
							"    //state\r",
							"    let state = pm.iterationData.get(\"state\");\r",
							"    if (state) {\r",
							"        updatedData.userAddress.state = state;\r",
							"    }\r",
							"\r",
							"    //country\r",
							"    let country = pm.iterationData.get(\"country\");\r",
							"    if (country) {\r",
							"        updatedData.userAddress.country = country;\r",
							"    }\r",
							"\r",
							"    //zipCode\r",
							"    let zipCode = pm.iterationData.get(\"zipCode\");\r",
							"    if (zipCode) {\r",
							"        updatedData.userAddress.zipCode = zipCode;\r",
							"    }\r",
							"    \r",
							"    pm.collectionVariables.set(\"updatedData\", JSON.stringify(updatedData)); // Store this for use in PUT body\r",
							"    console.log(pm.collectionVariables.get(\"updatedData\"));\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {    \r",
							"    const expectedStatusCode = pm.iterationData.get('expected_status_code');\r",
							"\r",
							"    console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    let expectedStatusLine =  pm.iterationData.get('expected_status_line');\r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Schema and data validation for positive scenarios of PUT.\r",
							"if (pm.response.code === 200) {\r",
							"\r",
							"    // Schema Validation\r",
							"    pm.test(\"Response schema is valid\", function () {\r",
							"        const userSchema = { \r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"userAddress\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"addressId\": { \"type\": \"integer\" },\r",
							"                        \"plotNumber\": { \"type\": [\"string\", \"null\"] },\r",
							"                        \"street\": { \"type\": \"string\" },\r",
							"                        \"state\": { \"type\": \"string\" },\r",
							"                        \"country\": { \"type\": \"string\" },\r",
							"                        \"zipCode\": { \"type\": \"integer\" }\r",
							"                    },\r",
							"                    \"required\": [\"addressId\", \"plotNumber\", \"street\", \"state\", \"country\", \"zipCode\"]\r",
							"                },\r",
							"                \"user_id\": { \"type\": \"integer\" },\r",
							"                \"user_first_name\": { \"type\": \"string\" },\r",
							"                \"user_last_name\": { \"type\": \"string\" },\r",
							"                \"user_contact_number\": { \"type\": \"integer\" },\r",
							"                \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"                \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"                \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"userAddress\",\r",
							"                \"user_id\",\r",
							"                \"user_first_name\",\r",
							"                \"user_last_name\",\r",
							"                \"user_contact_number\",\r",
							"                \"user_email_id\",\r",
							"                \"creation_time\",\r",
							"                \"last_mod_time\"\r",
							"            ]\r",
							"        };\r",
							"    });\r",
							"\r",
							"     // Data Validation\r",
							"    pm.test(\"Validate user details\", function () {\r",
							"        let responseJson = pm.response.json();\r",
							"\r",
							"        let updatedData = JSON.parse(pm.collectionVariables.get(\"updatedData\") || \"{}\");\r",
							"              \r",
							"        // Validate that the response values match the expected ones from the json data\r",
							"        pm.expect(responseJson.user_id).to.eql(parseInt(pm.collectionVariables.get('new_user_Id')));\r",
							"        pm.expect(responseJson.user_first_name).to.eql(updatedData.user_first_name);\r",
							"        pm.expect(responseJson.user_last_name).to.eql(updatedData.user_last_name);\r",
							"        pm.expect(responseJson.user_contact_number).to.eql(updatedData.user_contact_number);\r",
							"        pm.expect(responseJson.userAddress.street).to.eql(updatedData.userAddress.street);\r",
							"        pm.expect(responseJson.userAddress.plotNumber).to.eql(updatedData.userAddress.plotNumber);\r",
							"        pm.expect(responseJson.userAddress.state).to.eql(updatedData.userAddress.state);\r",
							"        pm.expect(responseJson.userAddress.country).to.eql(updatedData.userAddress.country);\r",
							"        pm.expect(responseJson.userAddress.zipCode).to.eql(updatedData.userAddress.zipCode);       \r",
							"\r",
							"    });\r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{updatedData}}"
				},
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}/{{new_user_Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}",
						"{{new_user_Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {\r",
							"    // Get expected status code from CSV\r",
							"    let expectedStatusCode = parseInt(pm.iterationData.get('expected_status_code')); \r",
							"\r",
							"     console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    // Get expected status line from CSV\r",
							"    let expectedStatusLine = pm.iterationData.get('expected_status_line'); \r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}/{{new_user_Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}",
						"{{new_user_Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteUserByFirstName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code validation\r",
							"pm.test(\"Validate status code with expected value\", function () {\r",
							"    // Get expected status code from CSV\r",
							"    let expectedStatusCode = parseInt(pm.iterationData.get('expected_status_code')); \r",
							"\r",
							"     console.log(\"Method:\" + pm.iterationData.get('Method') + \"|\" + \"Scenario:\"+ pm.iterationData.get('Scenario') + \"|\" + \"Expected:\" + expectedStatusCode + \"|\" + \"Actual:\" + pm.response.code);\r",
							"\r",
							"    pm.response.to.have.status(expectedStatusCode); \r",
							"});\r",
							"\r",
							"// Status line validation\r",
							"pm.test(\"Validate status line with expected value\", function () {\r",
							"    // Get expected status line from CSV\r",
							"    let expectedStatusLine = pm.iterationData.get('expected_status_line'); \r",
							"    pm.expect(pm.response.status).to.include(expectedStatusLine); \r",
							"});\r",
							"\r",
							"// Header Validation\r",
							"pm.test(\"Content-Type should be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{endpoint}}/{{user_first_name}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{endpoint}}",
						"{{user_first_name}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			},
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.environment.set(\"username\", \"Numpy@gmail.com\");",
					"pm.environment.set(\"password\", \"userapi@2025\");",
					"",
					"if (pm.iterationData.has(\"endpoint\")) {",
					"    pm.collectionVariables.set(\"endpoint\",pm.iterationData.get(\"endpoint\"));",
					"}",
					"",
					"// Run the request only if the request name matches the request name from csv file.",
					"let requestName = pm.iterationData.get(\"RequestName\");",
					"if (pm.info.requestName !== requestName){",
					"     pm.execution.skipRequest();",
					"}",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "invalid_userId",
			"value": ""
		},
		{
			"key": "invalidFirstName",
			"value": ""
		},
		{
			"key": "postCount",
			"value": ""
		},
		{
			"key": "putCount",
			"value": ""
		},
		{
			"key": "postIteration",
			"value": ""
		},
		{
			"key": "putIteration",
			"value": ""
		},
		{
			"key": "csvDataArray",
			"value": ""
		},
		{
			"key": "stopExecution",
			"value": ""
		},
		{
			"key": "endpoint",
			"value": ""
		},
		{
			"key": "new_user_id",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "user_first_name",
			"value": ""
		},
		{
			"key": "new_user_Id",
			"value": ""
		},
		{
			"key": "new_user_first_name",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "updatedData",
			"value": ""
		}
	]
}